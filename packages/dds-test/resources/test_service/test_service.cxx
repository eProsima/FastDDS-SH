// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file test_service.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "test_service.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Method0_Request::Method0_Request()
{
    // m_data com.eprosima.idl.parser.typecode.StringTypeCode@5abca1e0
    m_data ="";

}

Method0_Request::~Method0_Request()
{
}

Method0_Request::Method0_Request(const Method0_Request &x)
{
    m_data = x.m_data;
}

Method0_Request::Method0_Request(Method0_Request &&x)
{
    m_data = std::move(x.m_data);
}

Method0_Request& Method0_Request::operator=(const Method0_Request &x)
{

    m_data = x.m_data;

    return *this;
}

Method0_Request& Method0_Request::operator=(Method0_Request &&x)
{

    m_data = std::move(x.m_data);

    return *this;
}

size_t Method0_Request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    return current_alignment - initial_alignment;
}

size_t Method0_Request::getCdrSerializedSize(const Method0_Request& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.data().size() + 1;

    return current_alignment - initial_alignment;
}

void Method0_Request::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_data;
}

void Method0_Request::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_data;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Method0_Request::data(const std::string &_data)
{
m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Method0_Request::data(std::string &&_data)
{
m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const std::string& Method0_Request::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
std::string& Method0_Request::data()
{
    return m_data;
}

size_t Method0_Request::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Method0_Request::isKeyDefined()
{
   return false;
}

void Method0_Request::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}

Method1_Request::Method1_Request()
{
    // m_a com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1f28c152
    m_a = 0;
    // m_b com.eprosima.idl.parser.typecode.PrimitiveTypeCode@7791a895
    m_b = 0;

}

Method1_Request::~Method1_Request()
{


}

Method1_Request::Method1_Request(const Method1_Request &x)
{
    m_a = x.m_a;
    m_b = x.m_b;
}

Method1_Request::Method1_Request(Method1_Request &&x)
{
    m_a = x.m_a;
    m_b = x.m_b;
}

Method1_Request& Method1_Request::operator=(const Method1_Request &x)
{

    m_a = x.m_a;
    m_b = x.m_b;

    return *this;
}

Method1_Request& Method1_Request::operator=(Method1_Request &&x)
{

    m_a = x.m_a;
    m_b = x.m_b;

    return *this;
}

size_t Method1_Request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Method1_Request::getCdrSerializedSize(const Method1_Request& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Method1_Request::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_a;
    scdr << m_b;
}

void Method1_Request::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_a;
    dcdr >> m_b;
}

/*!
 * @brief This function sets a value in member a
 * @param _a New value for member a
 */
void Method1_Request::a(int32_t _a)
{
m_a = _a;
}

/*!
 * @brief This function returns the value of member a
 * @return Value of member a
 */
int32_t Method1_Request::a() const
{
    return m_a;
}

/*!
 * @brief This function returns a reference to member a
 * @return Reference to member a
 */
int32_t& Method1_Request::a()
{
    return m_a;
}

/*!
 * @brief This function sets a value in member b
 * @param _b New value for member b
 */
void Method1_Request::b(int32_t _b)
{
m_b = _b;
}

/*!
 * @brief This function returns the value of member b
 * @return Value of member b
 */
int32_t Method1_Request::b() const
{
    return m_b;
}

/*!
 * @brief This function returns a reference to member b
 * @return Reference to member b
 */
int32_t& Method1_Request::b()
{
    return m_b;
}


size_t Method1_Request::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Method1_Request::isKeyDefined()
{
   return false;
}

void Method1_Request::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
}

Method2_Request::Method2_Request()
{
    // m_data com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1d16f93d
    m_data = 0.0;

}

Method2_Request::~Method2_Request()
{
}

Method2_Request::Method2_Request(const Method2_Request &x)
{
    m_data = x.m_data;
}

Method2_Request::Method2_Request(Method2_Request &&x)
{
    m_data = x.m_data;
}

Method2_Request& Method2_Request::operator=(const Method2_Request &x)
{

    m_data = x.m_data;

    return *this;
}

Method2_Request& Method2_Request::operator=(Method2_Request &&x)
{

    m_data = x.m_data;

    return *this;
}

size_t Method2_Request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t Method2_Request::getCdrSerializedSize(const Method2_Request& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void Method2_Request::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_data;
}

void Method2_Request::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member data
 * @param _data New value for member data
 */
void Method2_Request::data(float _data)
{
m_data = _data;
}

/*!
 * @brief This function returns the value of member data
 * @return Value of member data
 */
float Method2_Request::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
float& Method2_Request::data()
{
    return m_data;
}


size_t Method2_Request::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Method2_Request::isKeyDefined()
{
   return false;
}

void Method2_Request::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}

Union_Request::Union_Request()
{
    m__d = 0;
    // m_method0 com.eprosima.fastrtps.idl.parser.typecode.StructTypeCode@23d2a7e8

    // m_method1 com.eprosima.fastrtps.idl.parser.typecode.StructTypeCode@7a9273a8

    // m_method2 com.eprosima.fastrtps.idl.parser.typecode.StructTypeCode@26a7b76d

}

Union_Request::~Union_Request()
{
}

Union_Request::Union_Request(const Union_Request &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_method0 = x.m_method0;
        break;
        case 1:
        m_method1 = x.m_method1;
        break;
        case 2:
        m_method2 = x.m_method2;
        break;
        default:
        break;
    }
}

Union_Request::Union_Request(Union_Request &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_method0 = std::move(x.m_method0);
        break;
        case 1:
        m_method1 = std::move(x.m_method1);
        break;
        case 2:
        m_method2 = std::move(x.m_method2);
        break;
        default:
        break;
    }
}

Union_Request& Union_Request::operator=(const Union_Request &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_method0 = x.m_method0;
        break;
        case 1:
        m_method1 = x.m_method1;
        break;
        case 2:
        m_method2 = x.m_method2;
        break;
        default:
        break;
    }

    return *this;
}

Union_Request& Union_Request::operator=(Union_Request &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_method0 = std::move(x.m_method0);
        break;
        case 1:
        m_method1 = std::move(x.m_method1);
        break;
        case 2:
        m_method2 = std::move(x.m_method2);
        break;
        default:
        break;
    }

    return *this;
}

void Union_Request::_d(uint32_t __d)
{
    bool b = false;

    switch(m__d)
    {
        case 0:
        switch(__d)
        {
            case 0:
            b = true;
            break;
            default:
            break;
        }
        break;
        case 1:
        switch(__d)
        {
            case 1:
            b = true;
            break;
            default:
            break;
        }
        break;
        case 2:
        switch(__d)
        {
            case 2:
            b = true;
            break;
            default:
            break;
        }
        break;
    }

    if(!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

uint32_t Union_Request::_d() const
{
    return m__d;
}

uint32_t& Union_Request::_d()
{
    return m__d;
}

void Union_Request::method0(const Method0_Request &_method0)
{
    m_method0 = _method0;
    m__d = 0;
}

void Union_Request::method0(Method0_Request &&_method0)
{
    m_method0 = std::move(_method0);
    m__d = 0;
}

const Method0_Request& Union_Request::method0() const
{
    bool b = false;

    switch(m__d)
    {
        case 0:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method0;
}

Method0_Request& Union_Request::method0()
{
    bool b = false;

    switch(m__d)
    {
        case 0:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method0;
}
void Union_Request::method1(const Method1_Request &_method1)
{
    m_method1 = _method1;
    m__d = 1;
}

void Union_Request::method1(Method1_Request &&_method1)
{
    m_method1 = std::move(_method1);
    m__d = 1;
}

const Method1_Request& Union_Request::method1() const
{
    bool b = false;

    switch(m__d)
    {
        case 1:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method1;
}

Method1_Request& Union_Request::method1()
{
    bool b = false;

    switch(m__d)
    {
        case 1:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method1;
}
void Union_Request::method2(const Method2_Request &_method2)
{
    m_method2 = _method2;
    m__d = 2;
}

void Union_Request::method2(Method2_Request &&_method2)
{
    m_method2 = std::move(_method2);
    m__d = 2;
}

const Method2_Request& Union_Request::method2() const
{
    bool b = false;

    switch(m__d)
    {
        case 2:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method2;
}

Method2_Request& Union_Request::method2()
{
    bool b = false;

    switch(m__d)
    {
        case 2:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method2;
}

size_t Union_Request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


        reset_alignment = current_alignment;

        reset_alignment += Method0_Request::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        
        reset_alignment = current_alignment;

        reset_alignment += Method1_Request::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        
        reset_alignment = current_alignment;

        reset_alignment += Method2_Request::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        

    return union_max_size_serialized - initial_alignment;
}

// TODO(Ricardo) Review
size_t Union_Request::getCdrSerializedSize(const Union_Request& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    switch(data.m__d)
    {
        case 0:
        current_alignment += Method0_Request::getCdrSerializedSize(data.method0(), current_alignment);
        break;
        case 1:
        current_alignment += Method1_Request::getCdrSerializedSize(data.method1(), current_alignment);
        break;
        case 2:
        current_alignment += Method2_Request::getCdrSerializedSize(data.method2(), current_alignment);
        break;
        default:
        break;
    }

    return current_alignment - initial_alignment;
}

void Union_Request::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case 0:
        scdr << m_method0;
        break;
        case 1:
        scdr << m_method1;
        break;
        case 2:
        scdr << m_method2;
        break;
        default:
        break;
    }
}

void Union_Request::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case 0:
        dcdr >> m_method0;
        break;
        case 1:
        dcdr >> m_method1;
        break;
        case 2:
        dcdr >> m_method2;
        break;
        default:
        break;
    }
}


Method0_Reply::Method0_Reply()
{
    // m_success com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6043cd28
    m_success = false;

}

Method0_Reply::~Method0_Reply()
{
}

Method0_Reply::Method0_Reply(const Method0_Reply &x)
{
    m_success = x.m_success;
}

Method0_Reply::Method0_Reply(Method0_Reply &&x)
{
    m_success = x.m_success;
}

Method0_Reply& Method0_Reply::operator=(const Method0_Reply &x)
{

    m_success = x.m_success;

    return *this;
}

Method0_Reply& Method0_Reply::operator=(Method0_Reply &&x)
{

    m_success = x.m_success;

    return *this;
}

size_t Method0_Reply::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t Method0_Reply::getCdrSerializedSize(const Method0_Reply& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void Method0_Reply::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_success;
}

void Method0_Reply::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_success;
}

/*!
 * @brief This function sets a value in member success
 * @param _success New value for member success
 */
void Method0_Reply::success(bool _success)
{
m_success = _success;
}

/*!
 * @brief This function returns the value of member success
 * @return Value of member success
 */
bool Method0_Reply::success() const
{
    return m_success;
}

/*!
 * @brief This function returns a reference to member success
 * @return Reference to member success
 */
bool& Method0_Reply::success()
{
    return m_success;
}


size_t Method0_Reply::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Method0_Reply::isKeyDefined()
{
   return false;
}

void Method0_Reply::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}

Method1_Reply::Method1_Reply()
{
    // m_result com.eprosima.idl.parser.typecode.PrimitiveTypeCode@cb51256
    m_result = 0;

}

Method1_Reply::~Method1_Reply()
{
}

Method1_Reply::Method1_Reply(const Method1_Reply &x)
{
    m_result = x.m_result;
}

Method1_Reply::Method1_Reply(Method1_Reply &&x)
{
    m_result = x.m_result;
}

Method1_Reply& Method1_Reply::operator=(const Method1_Reply &x)
{

    m_result = x.m_result;

    return *this;
}

Method1_Reply& Method1_Reply::operator=(Method1_Reply &&x)
{

    m_result = x.m_result;

    return *this;
}

size_t Method1_Reply::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t Method1_Reply::getCdrSerializedSize(const Method1_Reply& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void Method1_Reply::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_result;
}

void Method1_Reply::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_result;
}

/*!
 * @brief This function sets a value in member result
 * @param _result New value for member result
 */
void Method1_Reply::result(int32_t _result)
{
m_result = _result;
}

/*!
 * @brief This function returns the value of member result
 * @return Value of member result
 */
int32_t Method1_Reply::result() const
{
    return m_result;
}

/*!
 * @brief This function returns a reference to member result
 * @return Reference to member result
 */
int32_t& Method1_Reply::result()
{
    return m_result;
}


size_t Method1_Reply::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Method1_Reply::isKeyDefined()
{
   return false;
}

void Method1_Reply::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}

Method2_Reply::Method2_Reply()
{
    // m_data com.eprosima.idl.parser.typecode.PrimitiveTypeCode@59906517
    m_data = 0.0;

}

Method2_Reply::~Method2_Reply()
{
}

Method2_Reply::Method2_Reply(const Method2_Reply &x)
{
    m_data = x.m_data;
}

Method2_Reply::Method2_Reply(Method2_Reply &&x)
{
    m_data = x.m_data;
}

Method2_Reply& Method2_Reply::operator=(const Method2_Reply &x)
{

    m_data = x.m_data;

    return *this;
}

Method2_Reply& Method2_Reply::operator=(Method2_Reply &&x)
{

    m_data = x.m_data;

    return *this;
}

size_t Method2_Reply::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

size_t Method2_Reply::getCdrSerializedSize(const Method2_Reply& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void Method2_Reply::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_data;
}

void Method2_Reply::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_data;
}

/*!
 * @brief This function sets a value in member data
 * @param _data New value for member data
 */
void Method2_Reply::data(float _data)
{
m_data = _data;
}

/*!
 * @brief This function returns the value of member data
 * @return Value of member data
 */
float Method2_Reply::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
float& Method2_Reply::data()
{
    return m_data;
}


size_t Method2_Reply::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Method2_Reply::isKeyDefined()
{
   return false;
}

void Method2_Reply::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}

Union_Reply::Union_Reply()
{
    m__d = 0;
    // m_method0 com.eprosima.fastrtps.idl.parser.typecode.StructTypeCode@5bcea91b

    // m_method1 com.eprosima.fastrtps.idl.parser.typecode.StructTypeCode@5f3a4b84

    // m_method2 com.eprosima.fastrtps.idl.parser.typecode.StructTypeCode@27f723

}

Union_Reply::~Union_Reply()
{
}

Union_Reply::Union_Reply(const Union_Reply &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_method0 = x.m_method0;
        break;
        case 1:
        m_method1 = x.m_method1;
        break;
        case 2:
        m_method2 = x.m_method2;
        break;
        default:
        break;
    }
}

Union_Reply::Union_Reply(Union_Reply &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_method0 = std::move(x.m_method0);
        break;
        case 1:
        m_method1 = std::move(x.m_method1);
        break;
        case 2:
        m_method2 = std::move(x.m_method2);
        break;
        default:
        break;
    }
}

Union_Reply& Union_Reply::operator=(const Union_Reply &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_method0 = x.m_method0;
        break;
        case 1:
        m_method1 = x.m_method1;
        break;
        case 2:
        m_method2 = x.m_method2;
        break;
        default:
        break;
    }

    return *this;
}

Union_Reply& Union_Reply::operator=(Union_Reply &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_method0 = std::move(x.m_method0);
        break;
        case 1:
        m_method1 = std::move(x.m_method1);
        break;
        case 2:
        m_method2 = std::move(x.m_method2);
        break;
        default:
        break;
    }

    return *this;
}

void Union_Reply::_d(uint32_t __d)
{
    bool b = false;

    switch(m__d)
    {
        case 0:
        switch(__d)
        {
            case 0:
            b = true;
            break;
            default:
            break;
        }
        break;
        case 1:
        switch(__d)
        {
            case 1:
            b = true;
            break;
            default:
            break;
        }
        break;
        case 2:
        switch(__d)
        {
            case 2:
            b = true;
            break;
            default:
            break;
        }
        break;
    }

    if(!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

uint32_t Union_Reply::_d() const
{
    return m__d;
}

uint32_t& Union_Reply::_d()
{
    return m__d;
}

void Union_Reply::method0(const Method0_Reply &_method0)
{
    m_method0 = _method0;
    m__d = 0;
}

void Union_Reply::method0(Method0_Reply &&_method0)
{
    m_method0 = std::move(_method0);
    m__d = 0;
}

const Method0_Reply& Union_Reply::method0() const
{
    bool b = false;

    switch(m__d)
    {
        case 0:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method0;
}

Method0_Reply& Union_Reply::method0()
{
    bool b = false;

    switch(m__d)
    {
        case 0:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method0;
}
void Union_Reply::method1(const Method1_Reply &_method1)
{
    m_method1 = _method1;
    m__d = 1;
}

void Union_Reply::method1(Method1_Reply &&_method1)
{
    m_method1 = std::move(_method1);
    m__d = 1;
}

const Method1_Reply& Union_Reply::method1() const
{
    bool b = false;

    switch(m__d)
    {
        case 1:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method1;
}

Method1_Reply& Union_Reply::method1()
{
    bool b = false;

    switch(m__d)
    {
        case 1:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method1;
}
void Union_Reply::method2(const Method2_Reply &_method2)
{
    m_method2 = _method2;
    m__d = 2;
}

void Union_Reply::method2(Method2_Reply &&_method2)
{
    m_method2 = std::move(_method2);
    m__d = 2;
}

const Method2_Reply& Union_Reply::method2() const
{
    bool b = false;

    switch(m__d)
    {
        case 2:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method2;
}

Method2_Reply& Union_Reply::method2()
{
    bool b = false;

    switch(m__d)
    {
        case 2:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member is not been selected");
    }

    return m_method2;
}

size_t Union_Reply::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


        reset_alignment = current_alignment;

        reset_alignment += Method0_Reply::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        
        reset_alignment = current_alignment;

        reset_alignment += Method1_Reply::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        
        reset_alignment = current_alignment;

        reset_alignment += Method2_Reply::getMaxCdrSerializedSize(reset_alignment);

        if(union_max_size_serialized < reset_alignment)
            union_max_size_serialized = reset_alignment;

        

    return union_max_size_serialized - initial_alignment;
}

// TODO(Ricardo) Review
size_t Union_Reply::getCdrSerializedSize(const Union_Reply& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    switch(data.m__d)
    {
        case 0:
        current_alignment += Method0_Reply::getCdrSerializedSize(data.method0(), current_alignment);
        break;
        case 1:
        current_alignment += Method1_Reply::getCdrSerializedSize(data.method1(), current_alignment);
        break;
        case 2:
        current_alignment += Method2_Reply::getCdrSerializedSize(data.method2(), current_alignment);
        break;
        default:
        break;
    }

    return current_alignment - initial_alignment;
}

void Union_Reply::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case 0:
        scdr << m_method0;
        break;
        case 1:
        scdr << m_method1;
        break;
        case 2:
        scdr << m_method2;
        break;
        default:
        break;
    }
}

void Union_Reply::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case 0:
        dcdr >> m_method0;
        break;
        case 1:
        dcdr >> m_method1;
        break;
        case 2:
        dcdr >> m_method2;
        break;
        default:
        break;
    }
}


TestService_Request::TestService_Request()
{
    // m_request com.eprosima.idl.parser.typecode.UnionTypeCode@13c27452


}

TestService_Request::~TestService_Request()
{
}

TestService_Request::TestService_Request(const TestService_Request &x)
{
    m_request = x.m_request;
}

TestService_Request::TestService_Request(TestService_Request &&x)
{
    m_request = std::move(x.m_request);
}

TestService_Request& TestService_Request::operator=(const TestService_Request &x)
{

    m_request = x.m_request;

    return *this;
}

TestService_Request& TestService_Request::operator=(TestService_Request &&x)
{

    m_request = std::move(x.m_request);

    return *this;
}

size_t TestService_Request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += Union_Request::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t TestService_Request::getCdrSerializedSize(const TestService_Request& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Union_Request::getCdrSerializedSize(data.request(), current_alignment);

    return current_alignment - initial_alignment;
}

void TestService_Request::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_request;
}

void TestService_Request::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_request;
}

/*!
 * @brief This function copies the value in member request
 * @param _request New value to be copied in member request
 */
void TestService_Request::request(const Union_Request &_request)
{
m_request = _request;
}

/*!
 * @brief This function moves the value in member request
 * @param _request New value to be moved in member request
 */
void TestService_Request::request(Union_Request &&_request)
{
m_request = std::move(_request);
}

/*!
 * @brief This function returns a constant reference to member request
 * @return Constant reference to member request
 */
const Union_Request& TestService_Request::request() const
{
    return m_request;
}

/*!
 * @brief This function returns a reference to member request
 * @return Reference to member request
 */
Union_Request& TestService_Request::request()
{
    return m_request;
}

size_t TestService_Request::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool TestService_Request::isKeyDefined()
{
   return false;
}

void TestService_Request::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}

TestService_Reply::TestService_Reply()
{
    // m_reply com.eprosima.idl.parser.typecode.UnionTypeCode@5ed828d


}

TestService_Reply::~TestService_Reply()
{
}

TestService_Reply::TestService_Reply(const TestService_Reply &x)
{
    m_reply = x.m_reply;
}

TestService_Reply::TestService_Reply(TestService_Reply &&x)
{
    m_reply = std::move(x.m_reply);
}

TestService_Reply& TestService_Reply::operator=(const TestService_Reply &x)
{

    m_reply = x.m_reply;

    return *this;
}

TestService_Reply& TestService_Reply::operator=(TestService_Reply &&x)
{

    m_reply = std::move(x.m_reply);

    return *this;
}

size_t TestService_Reply::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += Union_Reply::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t TestService_Reply::getCdrSerializedSize(const TestService_Reply& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Union_Reply::getCdrSerializedSize(data.reply(), current_alignment);

    return current_alignment - initial_alignment;
}

void TestService_Reply::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_reply;
}

void TestService_Reply::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_reply;
}

/*!
 * @brief This function copies the value in member reply
 * @param _reply New value to be copied in member reply
 */
void TestService_Reply::reply(const Union_Reply &_reply)
{
m_reply = _reply;
}

/*!
 * @brief This function moves the value in member reply
 * @param _reply New value to be moved in member reply
 */
void TestService_Reply::reply(Union_Reply &&_reply)
{
m_reply = std::move(_reply);
}

/*!
 * @brief This function returns a constant reference to member reply
 * @return Constant reference to member reply
 */
const Union_Reply& TestService_Reply::reply() const
{
    return m_reply;
}

/*!
 * @brief This function returns a reference to member reply
 * @return Reference to member reply
 */
Union_Reply& TestService_Reply::reply()
{
    return m_reply;
}

size_t TestService_Reply::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool TestService_Reply::isKeyDefined()
{
   return false;
}

void TestService_Reply::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
}
