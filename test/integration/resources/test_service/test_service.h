// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file test_service.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _TEST_SERVICE_H_
#define _TEST_SERVICE_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(test_service_SOURCE)
#define test_service_DllAPI __declspec( dllexport )
#else
#define test_service_DllAPI __declspec( dllimport )
#endif // test_service_SOURCE
#else
#define test_service_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define test_service_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure Method0_In defined by the user in the IDL file.
 * @ingroup TEST_SERVICE
 */
class Method0_In
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Method0_In();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Method0_In();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Method0_In that will be copied.
     */
    eProsima_user_DllExport Method0_In(
            const Method0_In& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Method0_In that will be copied.
     */
    eProsima_user_DllExport Method0_In(
            Method0_In&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Method0_In that will be copied.
     */
    eProsima_user_DllExport Method0_In& operator =(
            const Method0_In& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Method0_In that will be copied.
     */
    eProsima_user_DllExport Method0_In& operator =(
            Method0_In&& x);

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const std::string& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            std::string&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const std::string& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport std::string& data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Method0_In& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_data;
};
/*!
 * @brief This class represents the structure Method1_In defined by the user in the IDL file.
 * @ingroup TEST_SERVICE
 */
class Method1_In
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Method1_In();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Method1_In();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Method1_In that will be copied.
     */
    eProsima_user_DllExport Method1_In(
            const Method1_In& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Method1_In that will be copied.
     */
    eProsima_user_DllExport Method1_In(
            Method1_In&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Method1_In that will be copied.
     */
    eProsima_user_DllExport Method1_In& operator =(
            const Method1_In& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Method1_In that will be copied.
     */
    eProsima_user_DllExport Method1_In& operator =(
            Method1_In&& x);

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            int32_t _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport int32_t a() const;

    /*!
     * @brief This function returns a reference to member a
     * @return Reference to member a
     */
    eProsima_user_DllExport int32_t& a();

    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            int32_t _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport int32_t b() const;

    /*!
     * @brief This function returns a reference to member b
     * @return Reference to member b
     */
    eProsima_user_DllExport int32_t& b();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Method1_In& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_a;
    int32_t m_b;
};
/*!
 * @brief This class represents the structure Method2_In defined by the user in the IDL file.
 * @ingroup TEST_SERVICE
 */
class Method2_In
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Method2_In();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Method2_In();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Method2_In that will be copied.
     */
    eProsima_user_DllExport Method2_In(
            const Method2_In& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Method2_In that will be copied.
     */
    eProsima_user_DllExport Method2_In(
            Method2_In&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Method2_In that will be copied.
     */
    eProsima_user_DllExport Method2_In& operator =(
            const Method2_In& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Method2_In that will be copied.
     */
    eProsima_user_DllExport Method2_In& operator =(
            Method2_In&& x);

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            float _data);

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport float data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport float& data();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Method2_In& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_data;
};
/*!
 * @brief This class represents the union TestService_Call defined by the user in the IDL file.
 * @ingroup TEST_SERVICE
 */
class TestService_Call
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TestService_Call();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TestService_Call();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TestService_Call that will be copied.
     */
    eProsima_user_DllExport TestService_Call(
            const TestService_Call& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TestService_Call that will be copied.
     */
    eProsima_user_DllExport TestService_Call(
            TestService_Call&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TestService_Call that will be copied.
     */
    eProsima_user_DllExport TestService_Call& operator =(
            const TestService_Call& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TestService_Call that will be copied.
     */
    eProsima_user_DllExport TestService_Call& operator =(
            TestService_Call&& x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            uint32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport uint32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport uint32_t& _d();

    /*!
     * @brief This function copies the value in member method0
     * @param _method0 New value to be copied in member method0
     */
    eProsima_user_DllExport void method0(
            const Method0_In& _method0);

    /*!
     * @brief This function moves the value in member method0
     * @param _method0 New value to be moved in member method0
     */
    eProsima_user_DllExport void method0(
            Method0_In&& _method0);

    /*!
     * @brief This function returns a constant reference to member method0
     * @return Constant reference to member method0
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Method0_In& method0() const;

    /*!
     * @brief This function returns a reference to member method0
     * @return Reference to member method0
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Method0_In& method0();
    /*!
     * @brief This function copies the value in member method1
     * @param _method1 New value to be copied in member method1
     */
    eProsima_user_DllExport void method1(
            const Method1_In& _method1);

    /*!
     * @brief This function moves the value in member method1
     * @param _method1 New value to be moved in member method1
     */
    eProsima_user_DllExport void method1(
            Method1_In&& _method1);

    /*!
     * @brief This function returns a constant reference to member method1
     * @return Constant reference to member method1
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Method1_In& method1() const;

    /*!
     * @brief This function returns a reference to member method1
     * @return Reference to member method1
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Method1_In& method1();
    /*!
     * @brief This function copies the value in member method2
     * @param _method2 New value to be copied in member method2
     */
    eProsima_user_DllExport void method2(
            const Method2_In& _method2);

    /*!
     * @brief This function moves the value in member method2
     * @param _method2 New value to be moved in member method2
     */
    eProsima_user_DllExport void method2(
            Method2_In&& _method2);

    /*!
     * @brief This function returns a constant reference to member method2
     * @return Constant reference to member method2
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Method2_In& method2() const;

    /*!
     * @brief This function returns a reference to member method2
     * @return Reference to member method2
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Method2_In& method2();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const TestService_Call& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);




private:

    uint32_t m__d;

    Method0_In m_method0;
    Method1_In m_method1;
    Method2_In m_method2;
};
/*!
 * @brief This class represents the structure Method0_Result defined by the user in the IDL file.
 * @ingroup TEST_SERVICE
 */
class Method0_Result
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Method0_Result();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Method0_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Method0_Result that will be copied.
     */
    eProsima_user_DllExport Method0_Result(
            const Method0_Result& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Method0_Result that will be copied.
     */
    eProsima_user_DllExport Method0_Result(
            Method0_Result&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Method0_Result that will be copied.
     */
    eProsima_user_DllExport Method0_Result& operator =(
            const Method0_Result& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Method0_Result that will be copied.
     */
    eProsima_user_DllExport Method0_Result& operator =(
            Method0_Result&& x);

    /*!
     * @brief This function sets a value in member success
     * @param _success New value for member success
     */
    eProsima_user_DllExport void success(
            bool _success);

    /*!
     * @brief This function returns the value of member success
     * @return Value of member success
     */
    eProsima_user_DllExport bool success() const;

    /*!
     * @brief This function returns a reference to member success
     * @return Reference to member success
     */
    eProsima_user_DllExport bool& success();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Method0_Result& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_success;
};
/*!
 * @brief This class represents the structure Method1_Result defined by the user in the IDL file.
 * @ingroup TEST_SERVICE
 */
class Method1_Result
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Method1_Result();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Method1_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Method1_Result that will be copied.
     */
    eProsima_user_DllExport Method1_Result(
            const Method1_Result& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Method1_Result that will be copied.
     */
    eProsima_user_DllExport Method1_Result(
            Method1_Result&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Method1_Result that will be copied.
     */
    eProsima_user_DllExport Method1_Result& operator =(
            const Method1_Result& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Method1_Result that will be copied.
     */
    eProsima_user_DllExport Method1_Result& operator =(
            Method1_Result&& x);

    /*!
     * @brief This function sets a value in member result
     * @param _result New value for member result
     */
    eProsima_user_DllExport void result(
            int32_t _result);

    /*!
     * @brief This function returns the value of member result
     * @return Value of member result
     */
    eProsima_user_DllExport int32_t result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     */
    eProsima_user_DllExport int32_t& result();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Method1_Result& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_result;
};
/*!
 * @brief This class represents the structure Method2_Result defined by the user in the IDL file.
 * @ingroup TEST_SERVICE
 */
class Method2_Result
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Method2_Result();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Method2_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Method2_Result that will be copied.
     */
    eProsima_user_DllExport Method2_Result(
            const Method2_Result& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Method2_Result that will be copied.
     */
    eProsima_user_DllExport Method2_Result(
            Method2_Result&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Method2_Result that will be copied.
     */
    eProsima_user_DllExport Method2_Result& operator =(
            const Method2_Result& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Method2_Result that will be copied.
     */
    eProsima_user_DllExport Method2_Result& operator =(
            Method2_Result&& x);

    /*!
     * @brief This function sets a value in member data
     * @param _data New value for member data
     */
    eProsima_user_DllExport void data(
            float _data);

    /*!
     * @brief This function returns the value of member data
     * @return Value of member data
     */
    eProsima_user_DllExport float data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport float& data();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Method2_Result& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_data;
};
/*!
 * @brief This class represents the union TestService_Return defined by the user in the IDL file.
 * @ingroup TEST_SERVICE
 */
class TestService_Return
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TestService_Return();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TestService_Return();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TestService_Return that will be copied.
     */
    eProsima_user_DllExport TestService_Return(
            const TestService_Return& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TestService_Return that will be copied.
     */
    eProsima_user_DllExport TestService_Return(
            TestService_Return&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TestService_Return that will be copied.
     */
    eProsima_user_DllExport TestService_Return& operator =(
            const TestService_Return& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TestService_Return that will be copied.
     */
    eProsima_user_DllExport TestService_Return& operator =(
            TestService_Return&& x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*!
     * @brief This function copies the value in member method0
     * @param _method0 New value to be copied in member method0
     */
    eProsima_user_DllExport void method0(
            const Method0_Result& _method0);

    /*!
     * @brief This function moves the value in member method0
     * @param _method0 New value to be moved in member method0
     */
    eProsima_user_DllExport void method0(
            Method0_Result&& _method0);

    /*!
     * @brief This function returns a constant reference to member method0
     * @return Constant reference to member method0
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Method0_Result& method0() const;

    /*!
     * @brief This function returns a reference to member method0
     * @return Reference to member method0
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Method0_Result& method0();
    /*!
     * @brief This function copies the value in member method1
     * @param _method1 New value to be copied in member method1
     */
    eProsima_user_DllExport void method1(
            const Method1_Result& _method1);

    /*!
     * @brief This function moves the value in member method1
     * @param _method1 New value to be moved in member method1
     */
    eProsima_user_DllExport void method1(
            Method1_Result&& _method1);

    /*!
     * @brief This function returns a constant reference to member method1
     * @return Constant reference to member method1
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Method1_Result& method1() const;

    /*!
     * @brief This function returns a reference to member method1
     * @return Reference to member method1
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Method1_Result& method1();
    /*!
     * @brief This function copies the value in member method2
     * @param _method2 New value to be copied in member method2
     */
    eProsima_user_DllExport void method2(
            const Method2_Result& _method2);

    /*!
     * @brief This function moves the value in member method2
     * @param _method2 New value to be moved in member method2
     */
    eProsima_user_DllExport void method2(
            Method2_Result&& _method2);

    /*!
     * @brief This function returns a constant reference to member method2
     * @return Constant reference to member method2
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport const Method2_Result& method2() const;

    /*!
     * @brief This function returns a reference to member method2
     * @return Reference to member method2
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport Method2_Result& method2();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const TestService_Return& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);




private:

    int32_t m__d;

    Method0_Result m_method0;
    Method1_Result m_method1;
    Method2_Result m_method2;
};
/*!
 * @brief This class represents the structure TestService_Request defined by the user in the IDL file.
 * @ingroup TEST_SERVICE
 */
class TestService_Request
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TestService_Request();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TestService_Request();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TestService_Request that will be copied.
     */
    eProsima_user_DllExport TestService_Request(
            const TestService_Request& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TestService_Request that will be copied.
     */
    eProsima_user_DllExport TestService_Request(
            TestService_Request&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TestService_Request that will be copied.
     */
    eProsima_user_DllExport TestService_Request& operator =(
            const TestService_Request& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TestService_Request that will be copied.
     */
    eProsima_user_DllExport TestService_Request& operator =(
            TestService_Request&& x);

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const TestService_Call& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            TestService_Call&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const TestService_Call& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport TestService_Call& data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const TestService_Request& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    TestService_Call m_data;
};
/*!
 * @brief This class represents the structure TestService_Reply defined by the user in the IDL file.
 * @ingroup TEST_SERVICE
 */
class TestService_Reply
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport TestService_Reply();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~TestService_Reply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object TestService_Reply that will be copied.
     */
    eProsima_user_DllExport TestService_Reply(
            const TestService_Reply& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object TestService_Reply that will be copied.
     */
    eProsima_user_DllExport TestService_Reply(
            TestService_Reply&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object TestService_Reply that will be copied.
     */
    eProsima_user_DllExport TestService_Reply& operator =(
            const TestService_Reply& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object TestService_Reply that will be copied.
     */
    eProsima_user_DllExport TestService_Reply& operator =(
            TestService_Reply&& x);

    /*!
     * @brief This function copies the value in member reply
     * @param _reply New value to be copied in member reply
     */
    eProsima_user_DllExport void reply(
            const TestService_Return& _reply);

    /*!
     * @brief This function moves the value in member reply
     * @param _reply New value to be moved in member reply
     */
    eProsima_user_DllExport void reply(
            TestService_Return&& _reply);

    /*!
     * @brief This function returns a constant reference to member reply
     * @return Constant reference to member reply
     */
    eProsima_user_DllExport const TestService_Return& reply() const;

    /*!
     * @brief This function returns a reference to member reply
     * @return Reference to member reply
     */
    eProsima_user_DllExport TestService_Return& reply();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const TestService_Reply& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    TestService_Return m_reply;
};

#endif // _TEST_SERVICE_H_